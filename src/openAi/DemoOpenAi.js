import React, { useEffect, useState } from "react";
import { Configuration, OpenAIApi } from "openai";
import { Input, Modal, Skeleton } from "antd";
import { useSelector } from "react-redux";
import parse from "html-react-parser";

import CHATICON from "../assets/img/open-book.svg";
import Loading from "../component/SupportTab/Loading";

const { Search } = Input;
const ChatInput = ({ openChatBox, setOpenChatBox }) => {
  const [question1, setQuestion1] = useState("");
  const [question2, setQuestion2] = useState("");
  const [loading, setLoading] = useState(false);
  const user = useSelector((state) => {
    return state.auth.login.currentUser;
  });

  // ph·∫ßn g·ª≠i c√¢u h·ªèi
  const handleSubmit = async (value) => {
    if (value) {
      if (localStorage.getItem("gpt-count")) {
        let currentCount = Number(
          JSON.parse(localStorage.getItem("gpt-count"))
        );
        if (user) {
          if (currentCount >= 40) {
            alert("Vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ m·ªü h·∫øt ch·ª©c nƒÉng!");
            return;
          }
        } else {
          if (currentCount >= 20) {
            alert("Vui l√≤ng ƒëƒÉng k√≠ t√†i kho·∫£n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng!");
            return;
          }
        }
        let nextCount =
          Number(JSON.parse(localStorage.getItem("gpt-count"))) + 1;
        localStorage.setItem("gpt-count", JSON.stringify(nextCount));
      } else {
        localStorage.setItem("gpt-count", JSON.stringify(0));
      }
      setQuestion2("");
      setLoading(true);
      const configuration = new Configuration({
        apiKey: process.env.REACT_APP_TKGPT,
      });
      const openai = new OpenAIApi(configuration);
      // 2 m·∫´u c√¢u h·ªèi vs t·ª´ ng d√πng nh·∫≠p v√†o
      let baseText = `
tr·∫£ l·ªùi d√πm t√¥i theo form:
chuy·ªÉn t·ª´ "${value}" trong ti·∫øng nh·∫≠t l√†  :
M·ªôt s·ªë c√¢u v·ªõi t·ª´ "${value}" trong ti·∫øng nh·∫≠t l√† :
`;
      let base2 = `T·ª´ "${value}" trong ti·∫øng nh·∫≠t c√≥ l√† g√¨? ƒê·∫∑t c√¢u v√≠ d·ª• v·ªõi t·ª´ "${value}" trong ti·∫øng nh·∫≠t`;
      try {
        const completion = await openai.createCompletion({
          model: "text-davinci-003",
          prompt: base2,
          temperature: 0.6,
          max_tokens: 1000, //  tham s·ªë max_tokens
          n: 1,
          stream: false,
        });
        setLoading(false);
        setQuestion1(
          completion.data.choices[0].text.substring(3).replace(/\n/g, "<br>")
        );

        setQuestion2("");
      } catch (error) {
        if (error.response) {
          setLoading(false);
          setQuestion1(
            `<strong style="color:red">Do kh√¥ng ƒë·ªß kinh ph√≠ duy tr√¨ key n√™n ch·ª©c nƒÉng n√†y s·∫Ω t·∫°m d·ª´ng. Mong m·ªçi ng∆∞·ªùi th√¥ng c·∫£m! M·ªçi ng∆∞·ªùi c√≥ th·ªÉ ·ªßng h·ªô cho b·ªçn em m·ªôt √≠t kinh ph√≠ <a href="/donate" className="text-blue-500">T·∫°i ƒë√¢y</a>. D√π l√† <span className="text-blue-500 font-bold">1k</span>
            <span className="text-blue-500 font-bold">2k</span> c≈©ng c√°m ∆°n m·ªçi
            ng∆∞·ªùi üòä. S·ª± ·ªßng h·ªô c·ªßa c√°c b·∫°n l√† ƒë·ªông l·ª±c ƒë·ªÉ nh√≥m em ti·∫øp t·ª•c ph√°t
            tri·ªÉn trang web ·∫° ‚ù§Ô∏è</strong>`
          );
          setQuestion2("");
        } else {
          setLoading(false);
          setQuestion1(
            `<strong style="color:red">Do kh√¥ng ƒë·ªß kinh ph√≠ duy tr√¨ key n√™n ch·ª©c nƒÉng n√†y s·∫Ω t·∫°m d·ª´ng. Mong m·ªçi ng∆∞·ªùi th√¥ng c·∫£m! M·ªçi ng∆∞·ªùi c√≥ th·ªÉ ·ªßng h·ªô cho b·ªçn em m·ªôt √≠t kinh ph√≠ <a href="/donate" className="text-blue-500">T·∫°i ƒë√¢y</a>. D√π l√† <span className="text-blue-500 font-bold">1k</span>
            <span className="text-blue-500 font-bold">2k</span> c≈©ng c√°m ∆°n m·ªçi
            ng∆∞·ªùi üòä. S·ª± ·ªßng h·ªô c·ªßa c√°c b·∫°n l√† ƒë·ªông l·ª±c ƒë·ªÉ nh√≥m em ti·∫øp t·ª•c ph√°t
            tri·ªÉn trang web ·∫° ‚ù§Ô∏è</strong>`
          );

          setQuestion2("");
        }
      }
    }
  };

  //t·ª´ ng d√πng ƒëi·ªÅn v√†o v√† t·ª± ƒë·ªông t·∫°o th√™m m·ªôt c√¢u li√™n quan ƒë·ªÉ hi·ªán th·ªã ·ªü tab "c√¢u h·ªèi li√™n quan"
  useEffect(() => {
    if (question1) {
      setQuestion2("");
      (async () => {
        const configuration = new Configuration({
          apiKey: process.env.REACT_APP_TKGPT,
        });
        const openai = new OpenAIApi(configuration);

        let base2 = `Th√™m m·ªôt s·ªë c√¢u n√≥i th√™m v·ªÅ ${question1} ƒëi `;

        try {
          const completion = await openai.createCompletion({
            model: "text-davinci-003",
            prompt: base2,
            temperature: 0.6,
            max_tokens: 1000, // Th√™m tham s·ªë max_tokens t·∫°i ƒë
            n: 1,
            stream: false,
          });
          setQuestion2(
            completion.data.choices[0].text.substring(2).replace(/\n/g, "<br>")
          );
        } catch (error) {
          if (error.response) {
            console.log(error.response.status);
            console.log(error.response.data);
            setQuestion2("");
          } else {
            console.log(error.message);
            setQuestion2("");
          }
        }
      })();
    }
  }, [question1]);

  const handleCancel = () => {
    setOpenChatBox(false);
  };
  return (
    <div className="page_gpt">
      {/* <Draggable> */}
      <div>
        <div className="w-10 h-10 rounded-[9999px] flex flex-col   cursor-pointer">
          <img src={CHATICON} alt="" className="object-cover" />
        </div>
      </div>
      {/* </Draggable> */}
      {openChatBox && (
        <Modal
          title="Tra c·ª©u t·ª´ ƒëi·ªÉn"
          width="70%"
          id="chat"
          open={openChatBox}
          onCancel={handleCancel}
          maskClosable={false}
          className="modal__gpt"
          style={{ top: "50px" }}
          footer={[]}
        >
          <div className="pt-[2rem] gap-9 min-h-[30rem] flex flex-col">
            <Search
              disabled={loading}
              placeholder="Tra t∆∞ÃÄ v∆∞Ã£ng, ng∆∞ÃÉ phaÃÅp, kanji, m√¢ÃÉu c√¢u,.."
              allowClear
              maxLength={40}
              enterButton={
                <button
                  disabled={loading}
                  className={`p-[12px] ml-[2px] rounded-sm bg-blue-500 text-white ${
                    loading ? "opacity-50" : "opacity-100"
                  }`}
                >
                  T√¨m ki·∫øm
                </button>
              }
              size="large"
              onSearch={handleSubmit}
            />
            {loading && <Loading />}
            {question1 && !loading && (
              <div className="flex-1">
                {parse(question1)}
                <div className="flex flex-col pt-5 gap-4">
                  <h2 className="font-bold">M·ªôt s·ªë c√¢u li√™n quan</h2>
                  {question2 ? <p>{parse(question2)}</p> : <Skeleton active />}
                </div>
              </div>
            )}
          </div>
        </Modal>
      )}
    </div>
  );
};

export default ChatInput;
